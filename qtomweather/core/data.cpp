#include "data.h"
#include <limits.h>
////////////////////////////////////////////////////////////////////////////////
namespace Core {
////////////////////////////////////////////////////////////////////////////////
    Data::Data(){
        _flike = INT_MAX;
        _windSpeed = INT_MAX;
        _windGust = INT_MAX;
        _humidity = INT_MAX;
        _pressure = INT_MAX;
        _icon = INT_MAX;
        _windDirection = new std::string("N/A");
        _text = new std::string("N/A");
        _temperature_hi = new Temperature;
        _temperature_low = new Temperature;
    }
////////////////////////////////////////////////////////////////////////////////
    void
    Data::StartTime(time_t start_time){
        _start_time = start_time;
    }
////////////////////////////////////////////////////////////////////////////////
    void
    Data::EndTime(time_t end_time){
        _end_time = end_time;
    }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::Flike(float flike){
          _flike = flike;
     }
////////////////////////////////////////////////////////////////////////////////
     float
     Data::Flike() const{
         /* need to check type (Celsius Farenheit ) */
         return _flike;
     }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::WindSpeed(float windspeed){
         _windSpeed = windspeed;
     }
////////////////////////////////////////////////////////////////////////////////
     float
     Data::WindSpeed() const{
         /* need to check type ( ) */
         return _windSpeed;
     }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::WindDirection(const std::string& text){
         /* Check possible direction (N,NW,NNW,NE,NEE,S,SW,SWW,SE,SEE, E, W) */
         _windDirection->assign(text);
     }
////////////////////////////////////////////////////////////////////////////////
     std::string&
     Data::WindDirection(){
         return *_windDirection;
     }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::WindGust(float windgust){
         _windGust = windgust;
     }
////////////////////////////////////////////////////////////////////////////////
     float
     Data::WindGust() const{
         /* need to check type ( ) */
         return _windGust;
     }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::Humidity(int humidity){
         _humidity = humidity;
     }
////////////////////////////////////////////////////////////////////////////////
     int
     Data::Humidity() const{
         /* need to check type ( ) */
         return _humidity;
     }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::Icon(int icon){
         _icon = icon;
     }
////////////////////////////////////////////////////////////////////////////////
     int
     Data::Icon() const{
         /* need to check range (0 - 49) */
         return _icon;
     }
////////////////////////////////////////////////////////////////////////////////
     void
     Data::Text(const std::string& text){
         /* Check possible direction (N,NW,NNW,NE,NEE,S,SW,SWW,SE,SEE, E, W) */
         _text->assign(text);
     }
////////////////////////////////////////////////////////////////////////////////
     std::string&
     Data::Text(){
         return *_text;
     }
////////////////////////////////////////////////////////////////////////////////
    time_t
    Data::GetTimeDistance(time_t need_time){
        if(_end_time > need_time && _start_time < need_time)
            return (_end_time - _start_time);
        else
            return -1;
    }
////////////////////////////////////////////////////////////////////////////////
    Data::~Data(){
       delete _windDirection;
       delete _text;
       delete _temperature_hi;
       delete _temperature_low;
    }
////////////////////////////////////////////////////////////////////////////////
    Temperature& Data::temperature_hi(){
        return *_temperature_hi;
    }
////////////////////////////////////////////////////////////////////////////////
    Temperature& Data::temperature_low(){
        return *_temperature_low;
    }
////////////////////////////////////////////////////////////////////////////////
} // namespace Core
